//src/screens/SummarySchedulescreen/index.tsx
import React from 'react'
import { Container, Headers, PageSubtitle, PageTitle, Subcontainer, SummarySchedule  } from '../../components'

export const SummaryScheduleScreen = ({ route, navigation }) => {
  const { agendamento } = route.params

  return (
    <Container>      
    
    <Headers />
      <PageTitle>Monitorias</PageTitle>
      <PageSubtitle>Minhas monitorias agendadas</PageSubtitle>

      <Subcontainer align='center' mgLeft='15' mgTop='0'>
        <SummarySchedule navigation={navigation} route={undefined} />
      </Subcontainer>
    </Container>
  )
}

//src/components/organism/SummarySchedule/index.tsx
import React, { useState } from 'react'
import { CancelButton, CreateModal, PageSubtitle, PageTitle, Photo, StylezedButton, Subcontainer, Windows } from '~/components'
import { ScrollView } from 'react-native-gesture-handler'
import monitoringHours from '~/../archives/monitoringHours'
import { useAgendaActions } from '~/services/useAgendaActions'
import { useUserSchedule } from '~/services/useLoadUserSchedule'

const Calendar = require('~/../assets/Calendar.png')
const Clock = require( '~/../assets/Clock.png')

export const SummarySchedule = ({ route, navigation }) => {

    const { agendamento } = route.params
    const { agendas, loading, error, loadUserSchedule } = useUserSchedule()
    const { handleDelete, handleSubmit } = useAgendaActions(loadUserSchedule)
    const [openCreateModal, setOpenCreateModal] = useState(false)
    const [titleMessage, setTitleMessage] = useState('')
    const [bodyMessage, setBodyMessage] = useState('')

    function handleOnPress() {
        setOpenCreateModal(!openCreateModal);
    }

    const CreateModalCancel = () => {
        setTitleMessage('Desmarcar monitoria');
        setBodyMessage('Tem certeza que deseja cancelar o\nagendamento? Essa ação é irreversível!');
        handleOnPress();
    }

    return (
        <Subcontainer mgLeft='0' maxHgt='75' align='center'>
            <ScrollView>

                <Windows 
                    bg='white'
                    hgt='50'
                    bdRdBL='0'
                    bdRdBR='0'
                    mgTop='10'
                    justify='flex-end'
                >
                    <Subcontainer dir='row' bg='white' mgTop='0' bdRd='100' align='center'>
                        <Photo
                            hgt='40'
                            wdt='40'
                            mgTop='0'
                            mgLeft='15'
                            source={require('~/../assets/Book.png')} // ou a foto da matéria, se houver
                        />
                        <PageTitle mgTop='0' mgLeft='5' color='brisk'>
                            {agendamento.materia}
                        </PageTitle>
                    </Subcontainer>
                </Windows>

                <Windows
                    bg='darkGreen'
                    mgTop='0'
                    hgt='180'
                    bdRdTL='0'
                    bdRdTR='0'
                    dir='column'
                    align='flex-start'
                >   
                    <Subcontainer mgLeft='0' mgTop='15' bg='darkGreen' dir='row' maxHgt='16' bdRd='0' align='center' justify='flex-start'>
                        <Photo source={require('~/../assets/Calendar.png')} wdt='35' hgt='35' mgTop='0' mgLeft='15' bdRd='0' />
                        <PageSubtitle color='everWhite'>
                            {new Date(agendamento.data).toLocaleDateString('pt-BR')}
                        </PageSubtitle>
                    </Subcontainer>

                    <Subcontainer mgLeft='0' mgTop='10' bg='darkGreen' dir='row' maxHgt='16' bdRd='0' align='center' justify='flex-start'>
                        <Photo source={require('~/../assets/Clock.png')} wdt='35' hgt='35' mgTop='0' mgLeft='15' bdRd='0' />
                        <PageSubtitle color='everWhite'>
                            {agendamento.horario}
                        </PageSubtitle>
                    </Subcontainer>

                    <Subcontainer mgLeft='0' mgTop='10' bg='darkGreen' dir='row' maxHgt='16' bdRd='0' align='center' justify='flex-start'>
                        <Photo source={require('~/../assets/Book.png')} wdt='35' hgt='35' mgTop='0' mgLeft='15' />
                        <PageSubtitle color='everWhite'>
                            {agendamento.monitor}
                        </PageSubtitle>
                    </Subcontainer>

                    <Subcontainer mgLeft='0' mgTop='5' bg='darkGreen' dir='row' maxHgt='27' bdRd='0' justify='flex-end'>
                        <CancelButton
                            bg='everWhite'
                            wdt='215'
                            hgt='40'
                            mgTop='5'
                            mgRight='5'
                            bdRd='15'
                            color='darkRed'
                            label={'Desmarcar monitoria'}
                            fontSize='16'
                            onPress={CreateModalCancel}
                        />
                    </Subcontainer>
                </Windows>

                <CreateModal visible={openCreateModal} bg='white' bdRd='10' wdt='300' hgt='158' pdd='0'>
                    <PageTitle color='brisk' mgTop='-10' mgLeft='0' fontSize='20'>{titleMessage}</PageTitle>
                    <PageSubtitle color='brisk' fontSize='15' mgLeft='5' alignSelf='center'>{bodyMessage}</PageSubtitle>
                    <Subcontainer dir='row-reverse' bg='brisk' mgLeft='0' justify='center' align='center' maxHgt='0' mgTop='25'>
                        <StylezedButton
                            label={'Cancelar aula'}
                            bg='darkRed'
                            mgTop='27'
                            wdt='140'
                            hgt='40'
                            bdRd='10'
                            fontSize='16'
                            onPress={() => {
                                handleOnPress();
                                navigation.navigate('Monitoring');
                            }}
                        />
                        <StylezedButton
                            label={'Manter aula'}
                            bg='white'
                            color='darkRed'
                            mgTop='27'
                            wdt='140'
                            hgt='40'
                            bdRd='10'
                            fontSize='16'
                            onPress={handleOnPress}
                        />
                    </Subcontainer>
                </CreateModal>

            </ScrollView>
        </Subcontainer>
    )
}

//src/services/useUserAgendas.ts
import { useState, useEffect } from 'react'
import { API_URL } from '~/configs/config'
import * as SecureStore from 'expo-secure-store'

export const useUserAppointments = () => {
  const [agendamentos, setAgendamentos] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function fetchAgendamentos() {
      try {
        const token = await SecureStore.getItemAsync('token')
        const response = await fetch(`${API_URL}/agendamento`, {
          headers: { 'x-access-token': token || '' }
        })
        const data = await response.json()
        setAgendamentos(data)
      } catch (e) {
        console.error("Erro ao buscar agendamentos:", e)
      } finally {
        setLoading(false)
      }
    }

    fetchAgendamentos()
  }, [])

  return { agendamentos, loading }
}
